# Generated by Django 4.0.2 on 2022-02-08 14:27

import uuid

import django.db.models.deletion
from django.db import migrations, models

import questions.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("knowledge_maps", "0008_alter_concept_direct_prerequisites"),
        ("accounts", "0005_user_in_questions_trial"),
    ]

    operations = [
        migrations.CreateModel(
            name="QuestionBatch",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, help_text="Unique id", primary_key=True, serialize=False
                    ),
                ),
                (
                    "time_started",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Time that the question batch was started"
                    ),
                ),
                (
                    "time_taken_to_complete",
                    models.DateTimeField(
                        default=None,
                        help_text="Time after the question batch was started that it was completed",
                        null=True,
                    ),
                ),
                (
                    "completed",
                    models.CharField(
                        default="",
                        help_text="Whether the user completed the batch and the type of completion",
                        max_length=28,
                    ),
                ),
                (
                    "initial_display_knowledge_level",
                    models.FloatField(
                        help_text="The initial knowledge level displayed to the user"
                    ),
                ),
                (
                    "initial_knowledge_mean",
                    models.FloatField(
                        help_text="Mean of the user's knowledge state when they started the question batch"
                    ),
                ),
                (
                    "initial_knowledge_std_dev",
                    models.FloatField(
                        help_text="Standard deviation of the user's knowledge state when they started the question batch"
                    ),
                ),
                (
                    "levels_progressed",
                    models.FloatField(
                        default=0,
                        help_text="Actual number of levels the user progressed in this question batch",
                    ),
                ),
                (
                    "concept_completed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the highest level of the concept was achieved in this question batch",
                    ),
                ),
                (
                    "session_id",
                    models.TextField(help_text="session_id of the session the response was from"),
                ),
                (
                    "concept",
                    models.ForeignKey(
                        help_text="The concept that the question batch corresponds to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="question_batches",
                        to="knowledge_maps.concept",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User whose question-answer batch this is",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="question_batches",
                        to="accounts.user",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="QuestionTemplate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, help_text="Unique id", primary_key=True, serialize=False
                    ),
                ),
                (
                    "difficulty",
                    models.FloatField(
                        help_text="Question difficulty for the concept. Initially set by an expert, but will subsequently be inferred from data. A relative scale, with 0 the lowest possible and as many difficulty levels as is deemed makes sense by the expert.",
                        validators=[questions.validators.integer_is_positive],
                    ),
                ),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("conceptual", "Conceptual"),
                            ("practice", "Practice"),
                            ("", "No type"),
                        ],
                        help_text="Type of question - used to pick questions which vary in type",
                        max_length=20,
                    ),
                ),
                (
                    "template_text",
                    models.TextField(
                        help_text="Text for question template - generates full questions",
                        max_length=16384,
                        validators=[questions.validators.not_null],
                    ),
                ),
                (
                    "correct_answer_letter",
                    models.CharField(
                        choices=[
                            ("a", "Option a)"),
                            ("b", "Option b)"),
                            ("c", "Option c)"),
                            ("d", "Option d)"),
                        ],
                        help_text="Answer option (a, b, c or d) which is the correct answer to the question",
                        max_length=1,
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=False,
                        help_text="If questions from the template should be used onthe live site - broken questions should be deactivated until they're fixed!",
                    ),
                ),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "concept",
                    models.ForeignKey(
                        help_text="Concept that the question corresponds to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="question_templates",
                        to="knowledge_maps.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="QuestionResponse",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, help_text="Unique id", primary_key=True, serialize=False
                    ),
                ),
                (
                    "question_params",
                    models.JSONField(
                        help_text="question parameter values chosen from the template parameters"
                    ),
                ),
                (
                    "response",
                    models.TextField(
                        default=None,
                        help_text="Response given to the question. Null if yet to be answered",
                        max_length=1024,
                        null=True,
                    ),
                ),
                (
                    "predicted_prob_correct",
                    models.FloatField(
                        help_text="Predicted probability of answer being correct prior to answering"
                    ),
                ),
                (
                    "correct",
                    models.BooleanField(
                        default=None,
                        help_text="Was the response correct? Null if not yet answered.",
                        null=True,
                    ),
                ),
                (
                    "session_id",
                    models.TextField(help_text="session_id of the session the response was from"),
                ),
                (
                    "time_to_respond",
                    models.DurationField(
                        help_text="Time it took for the user to respond to the question. Measured on the backend. Currently measured, but not used",
                        null=True,
                    ),
                ),
                (
                    "time_asked",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Time that the question was asked"
                    ),
                ),
                (
                    "question_batch",
                    models.ForeignKey(
                        help_text="The question batch this question corresponds to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="responses",
                        to="questions.questionbatch",
                    ),
                ),
                (
                    "question_template",
                    models.ForeignKey(
                        help_text="question template this was a response to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="responses",
                        to="questions.questiontemplate",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User whose response this is",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="responses",
                        to="accounts.user",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="InferredKnowledgeState",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, help_text="Unique id", primary_key=True, serialize=False
                    ),
                ),
                (
                    "mean",
                    models.FloatField(
                        help_text="Mean of the inferred knowledge state distribution"
                    ),
                ),
                (
                    "std_dev",
                    models.FloatField(
                        help_text="Standard deviation of the inferred knowledge state distribution"
                    ),
                ),
                (
                    "highest_level_achieved",
                    models.FloatField(
                        help_text="We don't want users' knowledge to seemingly drop so precipitously between sessions, so we keep track of the highest level achieved by them"
                    ),
                ),
                (
                    "last_updated",
                    models.DateTimeField(
                        auto_now=True, help_text="Time that the knowledge state was last updated"
                    ),
                ),
                (
                    "concept",
                    models.ForeignKey(
                        help_text="The concept that this knowledge state refers to",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="user_knowledge_states",
                        to="knowledge_maps.concept",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who this knowledge state refers to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="knowledge_states",
                        to="accounts.user",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="questionresponse",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("predicted_prob_correct__gte", 0), ("predicted_prob_correct__lte", 1)
                ),
                name="prob_correct_is_valid_probability",
            ),
        ),
        migrations.AddConstraint(
            model_name="inferredknowledgestate",
            constraint=models.UniqueConstraint(
                fields=("user", "concept"), name="unique_user_concept"
            ),
        ),
    ]
