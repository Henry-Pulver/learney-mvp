# Generated by Django 4.0.2 on 2022-04-07 14:35

import uuid

import django.db.models.deletion
from django.db import migrations, models

TAG_NAME_COLOUR = [
    ("Intro", "#22c55e"),  # green
    ("Visual", "#67e8f9"),  # light blue
    ("Refresher", "#a855f7"),  # purple
    ("High-level", "#fb923c"),  # orange
    ("Deep-dive", "#3b82f6"),  # dark blue
    ("Math", "#ef4444"),  # red
    ("Code", "#6366f1"),  # indigo
    ("Motivation", "#bef264"),  # lime green
    ("Interactive", "#e879f9"),  # pink
]


def add_set_of_tags(apps, schema_editor):
    ContentTag = apps.get_model("learney_backend", "ContentTag")
    for tag_name, colour in TAG_NAME_COLOUR:
        ContentTag.objects.create(
            name=tag_name,
            colour=colour,
        )


def remove_tags(apps, schema_editor):
    ContentTag = apps.get_model("learney_backend", "ContentTag")
    ContentTag.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ("learney_backend", "0020_ensure_all_contentlinkpreviews_exist"),
    ]

    operations = [
        migrations.CreateModel(
            name="ContentAuthor",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, help_text="Unique id", primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "image_url",
                    models.URLField(
                        blank=True, help_text="Thumbnail image of the author", null=True
                    ),
                ),
                (
                    "youtube_channel_id",
                    models.CharField(
                        blank=True, help_text="Youtube channel ID", max_length=100, null=True
                    ),
                ),
                ("retry_get_from_youtube", models.BooleanField(default=False)),
                ("last_updated", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ContentTag",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, help_text="Unique id", primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=64, unique=True)),
                ("colour", models.CharField(help_text="hex colour code of the tag", max_length=7)),
                ("last_updated", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="contentlinkpreview",
            name="content_type",
            field=models.CharField(
                choices=[
                    ("video", "Video"),
                    ("article", "Article"),
                    ("lecture_slides", "Lecture Slides"),
                    ("image", "Image"),
                    ("pdf", "PDF"),
                    ("website", "Website"),
                    ("code", "Code"),
                    ("github", "GitHub"),
                    ("playground", "Playground"),
                    ("other", "Other"),
                ],
                default=None,
                help_text="Type of content on the link",
                max_length=20,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="contentlinkpreview",
            name="estimated_time_to_complete",
            field=models.DurationField(
                blank=True,
                default=None,
                help_text="Estimated time to complete the content on the link",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="contentlinkpreview",
            name="retry_get",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="contentlinkpreview",
            name="author",
            field=models.ForeignKey(
                blank=True,
                help_text="Author of the content on the link",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="learney_backend.contentauthor",
            ),
        ),
        migrations.AddField(
            model_name="contentlinkpreview",
            name="tags",
            field=models.ManyToManyField(
                help_text="Tags associated with the content on the link",
                to="learney_backend.ContentTag",
            ),
        ),
        migrations.RunPython(add_set_of_tags, reverse_code=remove_tags),
    ]
